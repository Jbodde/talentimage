swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /foto:
    post:
      tags:
      - "pet"
      summary: "Add a new foto to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "foto object that needs to be added to the database"
        required: true
        schema:
          $ref: "#/definitions/foto"
      responses:
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:fotos"
        - "read:fotos"

securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  foto:
    type: "object"
    required:
    - "requestId"
    - "class"
    - "score"
    properties:
      requestId:
        type: "integer"
        format: "int64"
      class:
        type: "string"
        example: "appel"
      score:
        type: "number"
        format: "float"
        exclusiveMaximum: true
        maximum: 1
        exclusiveMinimum: true
        minimum: 0
      requestdatum: 
        type: "string"
        format: "date-time"